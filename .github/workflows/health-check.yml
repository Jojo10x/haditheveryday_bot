name: Bot Health Check (48hr Alert)

on:
  schedule:
    # Runs every 8 hours (3 times a day)
    - cron: '0 */8 * * *'
  workflow_dispatch:

jobs:
  health-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Restore status cache
      id: cache
      uses: actions/cache/restore@v3
      with:
        path: .health/status.log
        key: bot-health-status

    - name: Check bot status
      id: check
      run: |
        # Check if the health endpoint on your Render service is responding
        response=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 https://haditheveryday-bot.onrender.com)
        
        if [ $response -eq 200 ]; then
          echo "status=online" >> $GITHUB_OUTPUT
          echo "‚úÖ Bot service is responding on Render"
        else
          echo "status=offline" >> $GITHUB_OUTPUT
          echo "‚ùå Bot service is not responding (HTTP $response)"
        fi

    - name: Save status to file
      run: |
        mkdir -p .health
        if [ ! -f .health/status.log ]; then
          touch .health/status.log
        fi
        echo "$(date '+%s')|${{ steps.check.outputs.status }}" >> .health/status.log
        echo "Current status log:"
        cat .health/status.log

    - name: Check 48-hour downtime
      id: downtime
      run: |
        if [ "${{ steps.check.outputs.status }}" == "online" ]; then
          echo "alert=false" >> $GITHUB_OUTPUT
          echo "Bot is healthy, clearing log"
          rm -f .health/status.log
          exit 0
        fi
        
        # Bot is offline, check how long
        current_time=$(date '+%s')
        forty_eight_hours=10  
        
        # Get the first offline timestamp
        if [ -f .health/status.log ]; then
          first_offline=$(grep "offline" .health/status.log | head -n 1 | cut -d'|' -f1)
          
          if [ ! -z "$first_offline" ]; then
            offline_duration=$((current_time - first_offline))
            echo "üîç Bot has been offline for $offline_duration seconds"
            
            if [ $offline_duration -ge $forty_eight_hours ]; then
              echo "alert=true" >> $GITHUB_OUTPUT
              echo "üö® ALERT: Bot down for ${offline_duration}s (threshold: ${forty_eight_hours}s)!"
            else
              echo "alert=false" >> $GITHUB_OUTPUT
              seconds_remaining=$((forty_eight_hours - offline_duration))
              echo "‚è≥ Bot offline for ${offline_duration}s (need ${seconds_remaining}s more before alert)"
            fi
          else
            echo "alert=false" >> $GITHUB_OUTPUT
            echo "First offline detection"
          fi
        else
          echo "alert=false" >> $GITHUB_OUTPUT
          echo "No status log found"
        fi

    - name: Save status cache
      if: always()
      uses: actions/cache/save@v3
      with:
        path: .health/status.log
        key: bot-health-status-${{ github.run_id }}

    - name: Delete old cache
      if: always()
      continue-on-error: true
      run: |
        gh cache delete bot-health-status || true
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Send Telegram Alert
      if: steps.downtime.outputs.alert == 'true'
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d chat_id="${{ secrets.ADMIN_CHAT_ID }}" \
          -d parse_mode="Markdown" \
          -d text="üö® *CRITICAL ALERT*%0A%0A‚ö†Ô∏è Hadith Bot has been DOWN for 48+ hours!%0A%0Aüïê Time: $(date '+%Y-%m-%d %H:%M:%S UTC')%0A%0Aüëâ Action Required: Check Render deployment immediately!%0A%0Aüîó https://dashboard.render.com"

    - name: Create GitHub Issue
      if: steps.downtime.outputs.alert == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'critical,bot-down'
          });
          
          if (issues.data.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® CRITICAL: Bot Down for 48+ Hours',
              body: `‚ö†Ô∏è **The Hadith Bot has been unresponsive for over 48 hours!**\n\n**Detection Time:** ${new Date().toISOString()}\n\n## Immediate Actions Required:\n\n1. Check Render deployment status\n2. Review application logs\n3. Verify database connectivity\n4. Test Telegram API token\n5. Check Hadith API status\n\n**Status:** Bot not responding to health endpoint\n\nüîó [Render Dashboard](https://dashboard.render.com)`,
              labels: ['critical', 'bot-down', 'urgent']
            });
          }